name: Guest List Terraform Deploy (Dev Only)

on:
  push:
    branches: [gili-feature]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '**.yml'
      - '**.yaml'
      - '.github/workflows/**'
  pull_request:
    branches: [gili-feature]
    paths:
      - '**.tf'
      - '**.tfvars'
      - '**.yml'
      - '**.yaml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options: [init, plan, apply, destroy]
      fast_plan:            # חדש: מצב plan מהיר (ללא refresh)
        description: 'Use fast plan (disable refresh) to speed up planning'
        required: false
        default: true
        type: boolean

env:
  TF_VERSION: "1.9.8"
  TF_LOG: INFO
  TF_IN_AUTOMATION: true

  AWS_DEFAULT_REGION: us-east-1

  TF_STATE_BUCKET: guestlist-tfstate-bucket
  TF_LOCK_TABLE: terraform-locks

  CLUSTER_ROLE_NAME: guestlist-cluster-cluster-role
  NODE_ROLE_NAME: guestlist-cluster-node-group-role

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      # ---- האצה: Cache לפרוביידרים של Terraform ----
      - name: Enable TF plugin cache env
        run: echo "TF_PLUGIN_CACHE_DIR=${{ runner.temp }}/.terraform-plugin-cache" >> $GITHUB_ENV

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/.terraform-plugin-cache
          key: ${{ runner.os }}-tfplugins-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-tfplugins-

      - name: Debug AWS Credentials Inputs
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "AWS_ACCESS_KEY_ID is missing"
          else
            echo "AWS_ACCESS_KEY_ID is set"
          fi

      - name: Configure AWS Credentials (Dev)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          audience: sts.amazonaws.com
          output-env-credentials: true

      - name: Detect Terraform Directory
        id: find-dir
        run: |
          if [ -f "./main.tf" ]; then
            echo "dir=." >> $GITHUB_OUTPUT
          elif [ -f "./terraform/main.tf" ]; then
            echo "dir=terraform" >> $GITHUB_OUTPUT
          elif [ -f "./infrastructure/main.tf" ]; then
            echo "dir=infrastructure" >> $GITHUB_OUTPUT
          else
            tfdir=$(find . -name "*.tf" -type f -exec dirname {} \; | head -1)
            if [ -z "$tfdir" ]; then
              tfdir="."
            fi
            echo "dir=$tfdir" >> $GITHUB_OUTPUT
          fi

      # ✅ שלב משולב: זיהוי IAM, יצירת bucket/table אם חסרים, וייצוא TF_VAR_*
      - name: Detect existing IAM/S3 and export TF_VAR_*
        shell: bash
        run: |
          set -euo pipefail

          cluster_role="${CLUSTER_ROLE_NAME}"
          node_role="${NODE_ROLE_NAME}"
          bucket="${TF_STATE_BUCKET}"
          region="${AWS_DEFAULT_REGION}"
          lock_table="${TF_LOCK_TABLE}"

          manage_iam=false
          create_state_backend=false

          # IAM roles
          if aws iam get-role --role-name "$cluster_role" >/dev/null 2>&1 && \
             aws iam get-role --role-name "$node_role" >/dev/null 2>&1; then
            echo "Found existing IAM roles: $cluster_role, $node_role"
            manage_iam=false
          else
            echo "One or both IAM roles are missing; Terraform will create them"
            manage_iam=true
          fi

          # S3 bucket
          if aws s3api head-bucket --bucket "$bucket" >/dev/null 2>&1; then
            echo "S3 bucket $bucket already exists"
          else
            echo "Creating S3 bucket: $bucket in $region"
            if [ "$region" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$bucket" --region "$region"
            else
              aws s3api create-bucket --bucket "$bucket" --region "$region" \
                --create-bucket-configuration LocationConstraint="$region"
            fi
            aws s3api put-bucket-versioning --bucket "$bucket" --versioning-configuration Status=Enabled
            aws s3api put-public-access-block --bucket "$bucket" \
              --public-access-block-configuration BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
            aws s3api put-bucket-encryption --bucket "$bucket" \
              --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
          fi

          # DynamoDB
          if aws dynamodb describe-table --table-name "$lock_table" >/dev/null 2>&1; then
            echo "DynamoDB table $lock_table already exists"
          else
            echo "Creating DynamoDB table: $lock_table"
            aws dynamodb create-table \
              --table-name "$lock_table" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "$region"
            aws dynamodb wait table-exists --table-name "$lock_table" --region "$region"
          fi

          # Export vars
          echo "TF_VAR_manage_iam=$manage_iam" >> "$GITHUB_ENV"
          echo "TF_VAR_cluster_role_name=$cluster_role" >> "$GITHUB_ENV"
          echo "TF_VAR_node_group_role_name=$node_role" >> "$GITHUB_ENV"
          echo "TF_VAR_create_state_backend=$create_state_backend" >> "$GITHUB_ENV"
          echo "TF_VAR_state_bucket_name=$bucket" >> "$GITHUB_ENV"
          echo "TF_VAR_lock_table_name=$lock_table" >> "$GITHUB_ENV"
          echo "TF_VAR_aws_region=$region" >> "$GITHUB_ENV"

      - name: Terraform Init (S3 backend from code)
        if: github.event.inputs.action == 'init' || github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy' || github.event_name != 'workflow_dispatch'
        working-directory: ${{ steps.find-dir.outputs.dir }}
        run: terraform init -input=false -reconfigure

      - name: Select/Create workspace "dev"
        working-directory: ${{ steps.find-dir.outputs.dir }}
        run: |
          terraform workspace select dev 2>/dev/null || terraform workspace new dev
          terraform workspace show

      - name: Init completed (manual)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'init'
        run: echo "Terraform init completed successfully."

      - name: Terraform State List
        working-directory: ${{ steps.find-dir.outputs.dir }}
        run: terraform state list || true

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan' || github.event_name != 'workflow_dispatch'
        timeout-minutes: 10
        working-directory: ${{ steps.find-dir.outputs.dir }}
        env:
          AWS_RETRY_MODE: adaptive
          AWS_MAX_ATTEMPTS: "5"
        run: |
          set -e
          PLAN_FLAGS="-lock-timeout=60s -parallelism=7 -no-color -input=false"
          if [ "${{ github.event.inputs.fast_plan }}" = "true" ]; then
            PLAN_FLAGS="$PLAN_FLAGS -refresh=false"
            echo "Running FAST plan (refresh=false)"
          else
            echo "Running NORMAL plan (refresh=true)"
          fi

          if [ -f "dev.tfvars" ]; then
            terraform plan $PLAN_FLAGS -var-file="dev.tfvars" -var="aws_region=${AWS_DEFAULT_REGION}" -out=tfplan-dev
          else
            terraform plan $PLAN_FLAGS -var="environment=dev" -var="aws_region=${AWS_DEFAULT_REGION}" -out=tfplan-dev
          fi

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        id: tf-apply
        working-directory: ${{ steps.find-dir.outputs.dir }}
        run: |
          if [ -f "tfplan-dev" ]; then
            terraform apply "tfplan-dev"
          elif [ -f "dev.tfvars" ]; then
            terraform apply -var-file="dev.tfvars" -var="aws_region=${AWS_DEFAULT_REGION}" -auto-approve
          else
            terraform apply -var="environment=dev" -var="aws_region=${AWS_DEFAULT_REGION}" -auto-approve
          fi

      - name: Show LB URL and health check (curl)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        working-directory: ${{ steps.find-dir.outputs.dir }}
        shell: bash
        run: |
          set -euo pipefail
          LB_HOST=$(terraform output -raw load_balancer_ip || echo "")
          if [ -z "$LB_HOST" ]; then
            echo "Failed to read Terraform output 'load_balancer_ip'."
            exit 1
          fi
          URL="http://${LB_HOST}:9999/"
          echo "Load Balancer URL: ${URL}"

          ATTEMPTS=30
          SLEEP=10
          for i in $(seq 1 $ATTEMPTS); do
            CODE=$(curl -sS -o /dev/null -w "%{http_code}" "$URL" || echo "000")
            if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 400 ]; then
              echo "OK: HTTP $CODE from $URL"
              exit 0
            fi
            echo "Attempt $i/$ATTEMPTS: HTTP $CODE - retrying in ${SLEEP}s..."
            sleep $SLEEP
          done
          echo "ERROR: Service not healthy after $((ATTEMPTS*SLEEP)) seconds at $URL"
          exit 1

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: ${{ steps.find-dir.outputs.dir }}
        run: |
          if [ -f "dev.tfvars" ]; then
            terraform destroy -var-file="dev.tfvars" -var="aws_region=${AWS_DEFAULT_REGION}" -auto-approve
          else
            terraform destroy -var="environment=dev" -var="aws_region=${AWS_DEFAULT_REGION}" -auto-approve
          fi
